{"version":3,"file":"figmaFile.js","sourceRoot":"","sources":["../src/figmaFile.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport * as dotenv from 'dotenv'\nimport * as fs from 'fs';\nimport {promises as fsPromises} from 'fs';\n\ndotenv.config()\n\nconst mockFilePrefix = 'figma-file';\n\nasync function getLocalFile(filename:string) : Promise<string | undefined> {\n    try {\n        return await fsPromises.readFile(filename, 'utf8');\n    } catch (e) {\n        console.log(`Error reading file: ${e}`)\n    }\n    return undefined;\n}\n\nexport async function getFigmaFile(brand:IBrand) : Promise<any> {\n    if (process.env.FIGMA_FILE_MOCK_ENABLED) {\n        console.log(`Getting figma file for brand: ${brand.name} from local mock file.`)\n        let fileName = `${'./public/'}${mockFilePrefix}-${brand.name}.json`\n        return getLocalFile(fileName);\n    }\n    console.log(`Getting figma file for brand: ${brand.name} from Figma API`)\n    const response = await fetch(`https://api.figma.com/v1/files/${brand.figmaFileId}`, {\n        method: 'get',\n        headers: {'Content-Type': 'application/json', 'X-Figma-Token':`${process.env.FIGMA_PERSONAL_TOKEN}`}\n    });\n\n    return await response.text();\n}\n\nexport async function getFileNodes(brand:IBrand, nodeIds:string) : Promise<any> {\n    if (process.env.FIGMA_FILE_MOCK_ENABLED) {\n        console.log(`Getting figma style file for brand: ${brand.name} from local mock file.`)\n        let dir = './public/';\n        let fileNameNodeStyles = `${dir}${mockFilePrefix}-${brand.name}-styles.json`;\n        return await getLocalFile(fileNameNodeStyles)\n    }\n\n    const uri = `https://api.figma.com/v1/files/${brand.figmaFileId}/nodes?ids=${nodeIds}`;\n    console.log(`Fetching nodes: ${nodeIds} from URI: ${uri}`);\n    const response = await fetch(uri, {\n        method: 'get',\n        headers: {'Content-Type': 'application/json', 'X-Figma-Token':`${process.env.FIGMA_PERSONAL_TOKEN}`}\n    });\n\n    return await response.text();\n}\n\nexport async function writeFile(content:string, brand:string, cssIdentifier:string) {\n    let dir = './generatedFiles/';\n    let fileName = `${dir}${cssIdentifier}-${brand}.json`\n    if (fs.existsSync(`${dir}`)) {\n        try {\n            await fsPromises.writeFile(fileName, content, 'utf8');\n            console.log(`File: ${fileName} written successfully.`)\n        } catch (e) {\n            console.log(`Error writing file: ${e}`)\n        }\n    } else {\n        try {\n            fsPromises.mkdir(dir).then(async function() {\n                console.log(`Directory: ${dir} created successfully`);\n                await fsPromises.writeFile(`${dir}${cssIdentifier}-${brand}.json`, content, 'utf8');\n                console.log(`File: ${fileName} written successfully.`)\n            }).catch(function() {\n                console.log('failed to create directory');\n            });\n        } catch (e) {\n            console.log(`Error writing file: ${e}`)\n        }\n    }\n}\n\nexport async function writeMockFile(content:string, brand:IBrand) {\n    let dir = './public/';\n    let fileName = `${dir}${mockFilePrefix}-${brand.name}.json`\n\n    if (!fs.existsSync(`${dir}`)) {\n        fsPromises.mkdir(dir).then(async function () {\n            console.log(`Directory: ${dir} created successfully`);\n            await fsPromises.writeFile(fileName, content, 'utf8');\n            console.log(`File: ${fileName} written successfully.`)\n        }).catch(function () {\n            throw new Error('failed to create directory')\n        });\n    }\n\n    try {\n        await fsPromises.writeFile(fileName, content, 'utf8');\n        console.log(`File: ${fileName} written successfully.`)\n    } catch (e) {\n        console.log(`Error writing file: ${e}`)\n    }\n\n    let figmaJson = JSON.parse(content);\n    if (!figmaJson.name) {\n        throw new Error('Missing name of Figma file. Probably invalid Figma file.')\n    }\n\n    console.log('Name:', figmaJson.name);\n    console.log('Last modified:', figmaJson.lastModified);\n    console.log('Version:', figmaJson.version);\n\n    const jsonPrettyString = JSON.stringify(figmaJson, null, 2);\n\n    try {\n        const prettyFileName = `${dir}${mockFilePrefix}-${brand.name}-pretty.json`\n        await fsPromises.writeFile(prettyFileName, jsonPrettyString, 'utf8');\n        console.log(`File: ${prettyFileName} written successfully.`)\n    } catch (e) {\n        console.log(`Error writing file: ${e}`)\n    }\n\n    await writeMockNodeFile(figmaJson, brand);\n}\n\nasync function writeMockNodeFile(figmaJson:any, brand:IBrand) {\n    let dir = './public/';\n    let fileNameNodeStyles = `${dir}${mockFilePrefix}-${brand.name}-styles.json`;\n\n    let counter = 0;\n    let styleKeysParams = Object.keys(figmaJson.styles).map(function(k) {\n        counter++\n        return k;\n    }).join(',');\n\n    console.log(`Style keys: ${styleKeysParams}`)\n    console.log(`Style keys length: ${counter}`);\n\n    let nodeStylesFileRaw = await getFileNodes(brand, styleKeysParams)\n\n    try {\n        await fsPromises.writeFile(fileNameNodeStyles, nodeStylesFileRaw, 'utf8');\n        console.log(`File: ${fileNameNodeStyles} written successfully.`)\n    } catch (e) {\n        console.log(`Error writing file: ${e}`)\n    }\n\n    const jsonPrettyString = JSON.stringify(JSON.parse(nodeStylesFileRaw), null, 2);\n\n    try {\n        const prettyFileName = `${dir}${mockFilePrefix}-${brand.name}-styles-pretty.json`;\n        await fsPromises.writeFile(prettyFileName, jsonPrettyString, 'utf8');\n        console.log(`File: ${prettyFileName} written successfully.`)\n    } catch (e) {\n        console.log(`Error writing file: ${e}`)\n    }\n}\n"]}